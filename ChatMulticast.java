/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatmulticast;

/**
 *
 * @author odalys
 */

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class ChatM extends javax.swing.JFrame {

    public static final String MCAST_ADDR  = "230.1.1.1"; //dir clase D valida, grupo al que nos vamos a unir
    public static final int MCAST_PORT = 4000;//puerto multicast
    public static final int DGRAM_BUF_LEN=512; //tama√±o del buffer
    public static InetAddress group =null;
    public static MulticastSocket socket;
    public static String nombre_usuario = "";
    public static ArrayList<String> usuarios_linea = new ArrayList<String>();
    public static ArrayList<String> mensajes_recibidos = new ArrayList<String>();
    public static String[] signos_emot = {":)",":D","X)",":S",":O",":P",":3",":'(",":L",">:("};

    /**
     * Creates new form ChatM
     */
    public ChatM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        btnConectar = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        NombreUsuario = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UsuariosConectados = new javax.swing.JTextArea();
        MensajeEnviar = new javax.swing.JTextField();
        btnEnviarMensaje = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        MsjPublico = new javax.swing.JRadioButton();
        MsjPrivado = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        Destinatario = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        MensajesRecibidos = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 153, 255));
        setName("Chat Multicast"); // NOI18N

        btnConectar.setBackground(new java.awt.Color(204, 255, 204));
        btnConectar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnConectar.setForeground(new java.awt.Color(0, 51, 51));
        btnConectar.setText("Conectado");
        btnConectar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConectarMouseClicked(evt);
            }
        });

        btnDesconectar.setBackground(new java.awt.Color(204, 255, 204));
        btnDesconectar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnDesconectar.setForeground(new java.awt.Color(0, 102, 102));
        btnDesconectar.setText("Desconectado");
        btnDesconectar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDesconectarMouseClicked(evt);
            }
        });

        NombreUsuario.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        NombreUsuario.setText("NombreUsuario");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Usuarios Conectados:");

        UsuariosConectados.setBackground(new java.awt.Color(204, 255, 204));
        UsuariosConectados.setColumns(20);
        UsuariosConectados.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        UsuariosConectados.setForeground(new java.awt.Color(0, 51, 51));
        UsuariosConectados.setRows(5);
        jScrollPane1.setViewportView(UsuariosConectados);

        btnEnviarMensaje.setBackground(new java.awt.Color(204, 255, 204));
        btnEnviarMensaje.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnEnviarMensaje.setForeground(new java.awt.Color(0, 51, 51));
        btnEnviarMensaje.setText("Enviar");
        btnEnviarMensaje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEnviarMensajeMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Chat:");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel1.setText("Tipo de Mensaje:");

        MsjPublico.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        MsjPublico.setText("Publico");

        MsjPrivado.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        MsjPrivado.setText("Privado");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Destinatario:");

        jScrollPane3.setViewportView(MensajesRecibidos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDesconectar))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MensajeEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NombreUsuario)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MsjPublico)
                                .addGap(30, 30, 30)
                                .addComponent(MsjPrivado))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel2)
                                    .addComponent(Destinatario, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel1)))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(NombreUsuario)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(MsjPublico)
                                    .addComponent(MsjPrivado))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Destinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(MensajeEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                    .addComponent(btnEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(btnConectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDesconectar)))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConectarMouseClicked

        // Envia el mensaje de inicio
        EnviarMensaje (socket,group,"inicio",nombre_usuario, "", "");
        
    }//GEN-LAST:event_btnConectarMouseClicked

    private void btnDesconectarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDesconectarMouseClicked
        
        // Envia el mensaje de fin
        EnviarMensaje (socket,group,"fin",nombre_usuario, "", "");
        
    }//GEN-LAST:event_btnDesconectarMouseClicked

    private void btnEnviarMensajeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEnviarMensajeMouseClicked
        // TODO add your handling code here:
        String texto_mensaje = "",destinatario="";
        
        texto_mensaje = MensajeEnviar.getText();
        if(texto_mensaje.isEmpty()){
            JOptionPane.showMessageDialog(null, "Por favor llena el campo mensaje");
        }
        else{
               
            if(MsjPublico.isSelected()==true){ //Mensaje Sala comun
                    destinatario="";
                    EnviarMensaje (socket,group,"msj",nombre_usuario, destinatario, texto_mensaje);    
                }
                    
            if(MsjPrivado.isSelected()==true){ //Mensaje Privado
                destinatario = Destinatario.getText();
                if(destinatario.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Por favor llena el campo destinatario");
                }
                else{
                    EnviarMensaje (socket,group,"prv",nombre_usuario, destinatario, texto_mensaje);
                }
                       
            }  
        }
         
    }//GEN-LAST:event_btnEnviarMensajeMouseClicked
    
    public static String[] RecuperarInfoMensaje(String linea){
            String[] info = linea.split(";");
            return info;
        }//RecuperarInfoMensaje
        
    public static void ActualizarListaUsuarios(String linea){
        String[] users = linea.split(";");
        usuarios_linea.clear();
        for(int i = 1; i < users.length; i++){
            //if(!(usuarios_linea.contains(users[i]))){
                usuarios_linea.add(users[i]);
            //}
        }        
        String usuario = "";
                
        for(int i = 0; i < usuarios_linea.size(); i++){
            usuario = usuario + (String) usuarios_linea.get(i)+"\n";                 
        }
        
        UsuariosConectados.setText(usuario);
        //MensajesRecibidos.setText(usuario);
		
    }//ActualizarUsuarios    
        
    public static void EnviarMensaje (MulticastSocket socket,InetAddress group,String tipo,String from, String to, String msj){
        String mensaje = "";
        mensaje = tipo + ";" + from + ";" + to + ";" + msj;           
            
        try{
            byte[] m = mensaje.getBytes();
            DatagramPacket mensajeSalida =
                new DatagramPacket(m, m.length, group,MCAST_PORT);
            socket.send(mensajeSalida);
    		
        }catch(IOException e){
    		e.printStackTrace();
    		System.exit(2);
    	
        }
    }//EnviarMensaje
    
    public static void MostrarMensaje(String Msj){
        String []infoMsj;
        String mensaje = "",linea_emoticon="";
        ArrayList<String> emoticones;
        String aux;
        infoMsj = RecuperarInfoMensaje(Msj);
        if(infoMsj[0].equals("msj")){ //Mensaje Sala comun
                emoticones = obtenerEmoticones(infoMsj[3]);
                if(emoticones.isEmpty()){ //el mensaje no contiene emoticones
                    mensaje = "<b>"+"[ "+infoMsj[0]+" ]"+"[ "+infoMsj[1]+" ]:"+infoMsj[3]+"</b>";
                    mensajes_recibidos.add(mensaje);
                }
                else{//el mensaje contiene emoticones
                    
                    for(int i = 0; i < emoticones.size(); i++){
                        
                        linea_emoticon = linea_emoticon + " <img src="+"\""+(String) emoticones.get(i)+".png\" />";
                    }
                    aux = LimpiarMensaje(infoMsj[3]);
                    mensaje = "<b>"+"[ "+infoMsj[0]+" ]"+"[ "+infoMsj[1]+" ]:"+aux+"</b>"+linea_emoticon;
                    mensajes_recibidos.add(mensaje);
                }
                
        }
                    
        else if(infoMsj[0].equals("prv")){ //Mensaje Privado
            if(nombre_usuario.equals(infoMsj[2])){
                emoticones = obtenerEmoticones(infoMsj[3]);
                if(emoticones.isEmpty()){ //el mensaje no contiene emoticones
                    mensaje = "<b>"+"[ "+infoMsj[0]+" ]"+"[ "+infoMsj[1]+" ]"+"[ "+infoMsj[2]+" ]:"+infoMsj[3]+"</b>";
                    mensajes_recibidos.add(mensaje);
                }
                else{//el mensaje contiene emoticones
                    
                    for(int i = 0; i < emoticones.size(); i++){
                        
                        linea_emoticon = linea_emoticon + " <img src="+"\""+(String) emoticones.get(i)+".png\" />";
                    }
                    aux = LimpiarMensaje(infoMsj[3]);
                    mensaje = "<b>"+"[ "+infoMsj[0]+" ]"+"[ "+infoMsj[1]+" ]"+"[ "+infoMsj[2]+" ]:"+aux+"</b>"+linea_emoticon;
                    mensajes_recibidos.add(mensaje);
                }
            }
        }
        String msj_mostrar = "<head><base href=\"file:c:/Users/odalys/Documents/ESCOM/3CMO/Aplicaciones Redes/ChatMulticast/emoticones/\"></head>";
              //C:\Users\odalys\Documents\ESCOM\3CMO\Aplicaciones Redes\ChatMulticast\emoticones  
        for(int i = 0; i < mensajes_recibidos.size(); i++){
            msj_mostrar = msj_mostrar +(String) mensajes_recibidos.get(i)+"<br>";                 
        }
        
        MensajesRecibidos.setContentType("text/html");
        
        MensajesRecibidos.setText(msj_mostrar);
        
        
	System.out.println(mensaje);
        
    }
    
    public static ArrayList<String> obtenerEmoticones(String mensaje){
        String []contenido_mensaje;
        ArrayList<String> emoticones_obtenidos = new ArrayList<String>();
        ArrayList<String> aux = new ArrayList<String>();
        //String aux;       
        contenido_mensaje = mensaje.split(" ");
        //public static String[] signos_emot = {":)",":D","X)",":S",":O",":P",":3",":'(",":L",">:("};
        for(int i = 0; i < contenido_mensaje.length; i++){
            for(int j = 0; j < signos_emot.length; j++){
                if(contenido_mensaje[i].equals(signos_emot[j])){
                    switch (signos_emot[j]){
                        case ":)":
                            emoticones_obtenidos.add("0");
                            break;
                       case ":D":
                            emoticones_obtenidos.add("1");
                            break;
                       case "X)":
                            emoticones_obtenidos.add("2");
                            break;
                       case ":S":
                            emoticones_obtenidos.add("3");
                            break;
                       case ":O":
                            emoticones_obtenidos.add("4");
                            break; 
                       case ":P":
                            emoticones_obtenidos.add("5");
                            break;
                       case ":3":
                            emoticones_obtenidos.add("6");
                            break;
                       case ":'(":
                            emoticones_obtenidos.add("7");
                            break;
                       case ":L":
                            emoticones_obtenidos.add("8");
                            break;
                       case ">:(":
                            emoticones_obtenidos.add("9");
                            break;                        
                    }                    
                }
            }
        }
        return emoticones_obtenidos;
    }
    
    public static String LimpiarMensaje (String mensaje){
        String mensaje_limpio="";
        String []contenido_mensaje;
        contenido_mensaje = mensaje.split(" ");
        ArrayList<String> Aux = new ArrayList<String>();
        
        for(int i = 0; i < signos_emot.length; i++){
            Aux.add(signos_emot[i]);                    
        }
        
        for(int j = 0; j < contenido_mensaje.length; j++){
            if(!(Aux.contains(contenido_mensaje[j]))){
                mensaje_limpio = mensaje_limpio + contenido_mensaje[j]+" "; 
            }
        }
        
        return mensaje_limpio;
    }
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
         //Pide al usuario un nombre 
        String textoNombreUsuario;
        textoNombreUsuario = JOptionPane.showInputDialog("Ingrese un nombre de usuario");
        nombre_usuario = textoNombreUsuario;
         /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatM().setVisible(true);
                
                NombreUsuario.setText(nombre_usuario);
                buttonGroup2.add(MsjPublico);
                buttonGroup2.add(MsjPrivado);
                
                }
        }); 
         
        try{
            group = InetAddress.getByName(MCAST_ADDR);//intenta resolver la direccion
        }catch(UnknownHostException e){
            e.printStackTrace();
            System.exit(1);
        }
    		
        try{
            socket = new MulticastSocket(MCAST_PORT); //socket tipo multicast
            socket.joinGroup(group);//se une al grupo
                                           
            while(true){
                byte[] bufer = new byte[DGRAM_BUF_LEN];//crea arreglo de bytes 
                String linea;
                DatagramPacket mensajeEntrada =
                    new DatagramPacket(bufer, bufer.length);
                socket.receive(mensajeEntrada);
                linea = new String(mensajeEntrada.getData(), 0, mensajeEntrada.getLength());
        
                if(linea.startsWith("list")){ //Mensaje de inicio o fin
                    ActualizarListaUsuarios(linea);
                }
                    
                if(linea.startsWith("msj")){ //Mensaje Sala comun
                    MostrarMensaje(linea);    
                }
                    
                if(linea.startsWith("prv")){ //Mensaje Privado
                    MostrarMensaje(linea);   
                }
                    
            } //while

        }catch(IOException e){
            e.printStackTrace();
            System.exit(2);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField Destinatario;
    public static javax.swing.JTextField MensajeEnviar;
    public static javax.swing.JEditorPane MensajesRecibidos;
    public static javax.swing.JRadioButton MsjPrivado;
    public static javax.swing.JRadioButton MsjPublico;
    public static javax.swing.JLabel NombreUsuario;
    public static javax.swing.JTextArea UsuariosConectados;
    public static javax.swing.JButton btnConectar;
    public static javax.swing.JButton btnDesconectar;
    public static javax.swing.JButton btnEnviarMensaje;
    private javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
